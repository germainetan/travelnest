
version: '3.8'

volumes:
  rabbitmq_data:
  pgdata: 
  kongadata:

networks:
  kong-net:
    driver: bridge


services:
# simple microservices listening on ports: 8080 - 8084

  #################################################
  # Booking: Booking microservice
  #################################################

  booking:
    image: booking:1.0
    container_name: booking-container
    build:
      context: ./booking
      dockerfile: booking.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8080:8080"
    environment:
          - dbname=travelnest:travelnest@host.docker.internal

  #################################################
  # Owner: Owner microservice
  #################################################

  owner:
    image: owner:1.0
    container_name: owner-container
    build:
      context: ./owner
      dockerfile: owner.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8081:8081"
    environment:
      - dbname=travelnest:travelnest@host.docker.internal

  #################################################
  # Renter: Renter microservice
  #################################################

  renter:
    image: renter:1.0
    container_name: renter-container
    build:
      context: ./renter
      dockerfile: renter.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8082:8082"
    environment:
      - dbname=travelnest:travelnest@host.docker.internal

  #################################################
  # Property: Property microservice
  #################################################

  property:
    image: property:1.0
    container_name: property-container
    build:
      context: ./property
      dockerfile: property.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8083:8083"
    environment:
      - dbname=travelnest:travelnest@host.docker.internal

  #################################################
  # Payment: Payment microservice
  #################################################

  payment:
    image: payment:1.0
    container_name: payment-container
    build:
      context: ./payment
      dockerfile: payment.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8084:8084"
    environment:
      - dbname=travelnest:travelnest@host.docker.internal

  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    hostname: esd-rabbit
    restart: always
    networks:
      - kong-net
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq

  #################################################
  # Whatsapp: Whatsapp microservice
  #################################################

  whatsapp:
    image: whatsapp:1.0
    container_name: whatsapp-container
    build:
      context: ./whatsapp
      dockerfile: whatsapp.Dockerfile
    restart: always
    networks:
      - kong-net
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1
      SID: ${SID}
      AUTHTOKEN: ${AUTHTOKEN}

# complex microservices listening on ports: 8085 - 8088

  #################################################
  # Check Booking: Check Booking microservice
  #################################################

  check_booking:
    image: check_booking:1.0
    container_name: check_booking-container
    build:
      context: ./check_booking
      dockerfile: ./check_booking.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8085:8085"
    depends_on:
      - property
      - booking
      - renter
    environment:
      property_URL: http://property:8083/property
      booking_URL: http://booking:8080/booking
      renter_URL: http://renter:8082/renter
      PYTHONUNBUFFERED: 1

  #################################################
  # Filter Property: Filter Property microservice
  #################################################

  filter_property:
    image: filter_property:1.0
    container_name: filter_property-container
    build:
      context: ./filter_property
      dockerfile: filter_property.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8086:8086"
    depends_on:
      - property
      - booking
    environment:
      property_URL: http://property:8083/property
      booking_URL: http://booking:8080/booking
      PYTHONUNBUFFERED: 1

  #################################################
  # Place Booking: Place Booking microservice
  #################################################

  place_booking:
    image: place_booking:1.0
    container_name: place_booking-container
    build:
      context: ./place_booking
      dockerfile: place_booking.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8087:8087"
    depends_on:
      - payment
      - property
      - booking
      - renter
      - owner
      - rabbitmq
      - whatsapp
    environment:
      payment_URL : "http://payment:8084/payment"
      booking_URL : "http://booking:8080/booking"
      property_URL : "http://property:8083/property"
      owner_URL : "http://owner:8081/owner"
      renter_URL : "http://renter:8082/renter"
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1

  # #################################################
  # # Process Booking: Process Booking microservice
  # #################################################

  process_booking:
    image: process_booking:1.0
    container_name: process_booking-container
    build:
      context: ./process_booking
      dockerfile: process_booking.Dockerfile
    restart: always
    networks:
      - kong-net
    # ports:
    #   - "8088:8088"
    depends_on:
      - payment
      - property
      - booking
      - renter
      - owner
      - rabbitmq
      - whatsapp
    environment:
      payment_URL : "http://payment:8084/payment"
      booking_URL : "http://booking:8080/booking"
      property_URL : "http://property:8083/property"
      owner_URL : "http://owner:8081/owner"
      renter_URL : "http://renter:8082/renter"
      rabbit_host: rabbitmq
      rabbit_port: 5672
      PYTHONUNBUFFERED: 1

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:2.0.4
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:2.0.4
    links:
      - rabbitmq
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
    ports:
      - "8000:8000"
  
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - kongadata:/app/kongadata